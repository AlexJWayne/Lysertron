// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe('LayerStack', function() {
    describe('constructor', function() {
      it('creates @layers as an empty array by default', function() {
        var stack;
        stack = new Echotron.LayerStack;
        return stack.layers.should.deep.equal([]);
      });
      return it('accepts an array of layers to populate @layers', function() {
        var echo, stack;
        echo = new Echotron.Echo;
        stack = new Echotron.LayerStack([echo]);
        return stack.layers.should.deep.equal([echo]);
      });
    });
    describe('song events', function() {
      return describe('delegates to each layer', function() {
        var Specho, echo1, echo2, stack;
        Specho = (function(_super) {

          __extends(Specho, _super);

          function Specho() {
            return Specho.__super__.constructor.apply(this, arguments);
          }

          Specho.prototype.beat = function() {
            return this.beated = true;
          };

          Specho.prototype.bar = function() {
            return this.barred = true;
          };

          Specho.prototype.segment = function() {
            return this.segmented = true;
          };

          Specho.prototype.tatum = function() {
            return this.tatumed = true;
          };

          return Specho;

        })(Echotron.Echo);
        echo1 = null;
        echo2 = null;
        stack = null;
        beforeEach(function() {
          echo1 = new Specho;
          echo2 = new Specho;
          return stack = new Echotron.LayerStack([echo1, echo2]);
        });
        it('on beat', function() {
          stack.beat();
          return echo1.beated.should.be["true"];
        });
        it('on bar', function() {
          stack.bar();
          return echo1.barred.should.be["true"];
        });
        it('on segment', function() {
          stack.segment();
          return echo1.segmented.should.be["true"];
        });
        return it('on tatum', function() {
          stack.tatum();
          return echo1.tatumed.should.be["true"];
        });
      });
    });
    describe('update()', function() {
      it('calls update on each layer', function() {
        var Specho, echo1, echo2, stack;
        Specho = (function(_super) {

          __extends(Specho, _super);

          function Specho() {
            return Specho.__super__.constructor.apply(this, arguments);
          }

          Specho.prototype.update = function(elapsed) {
            return this.updated = true;
          };

          return Specho;

        })(Echotron.Echo);
        echo1 = new Specho;
        echo2 = new Specho;
        stack = new Echotron.LayerStack([echo1, echo2]);
        stack.update();
        echo1.updated.should.be["true"];
        return echo2.updated.should.be["true"];
      });
      return it('removes expired layers', function() {
        var Specho, echo1, echo2, stack;
        Specho = (function(_super) {

          __extends(Specho, _super);

          function Specho(isExpired) {
            this.isExpired = isExpired;
            Specho.__super__.constructor.apply(this, arguments);
          }

          Specho.prototype.expired = function() {
            return this.isExpired;
          };

          return Specho;

        })(Echotron.Echo);
        echo1 = new Specho(false);
        echo2 = new Specho(true);
        stack = new Echotron.LayerStack([echo1, echo2]);
        stack.update();
        return stack.layers.should.deep.equal([echo1]);
      });
    });
    describe('push()', function() {
      it('adds a layer to @layers', function() {
        var echo, stack;
        stack = new Echotron.LayerStack;
        echo = new Echotron.Echo;
        stack.push(echo);
        return stack.layers.should.deep.equal([echo]);
      });
      return it('throws exception if a non Echotron.Echo object is pushed', function() {
        var obj, stack;
        stack = new Echotron.LayerStack;
        obj = {};
        return (function() {
          return stack.push(obj);
        }).should["throw"]("LayerStack::push() object is not a Echotron.Echo");
      });
    });
    describe('isEmpty()', function() {
      it('returns false when there are layers', function() {
        var stack;
        stack = new Echotron.LayerStack(new Echotron.Echo);
        return stack.isEmpty().should.be["false"];
      });
      return it('returns true when there are no layers', function() {
        var stack;
        stack = new Echotron.LayerStack;
        return stack.isEmpty().should.be["true"];
      });
    });
    return describe('transition()', function() {
      return it('needs specs');
    });
  });

}).call(this);
