// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe('Echo', function() {
    describe('constructor', function() {});
    describe('uniformAttrs', function() {
      var Specho;
      Specho = (function(_super) {

        __extends(Specho, _super);

        function Specho() {
          return Specho.__super__.constructor.apply(this, arguments);
        }

        Specho.prototype.uniformAttrs = {
          beer: 'f'
        };

        return Specho;

      })(Echotron.Echo);
      it('creates a getter', function() {
        var echo;
        echo = new Specho;
        echo.uniforms.beer.value = 99;
        return echo.beer.should.equal(99);
      });
      it('creates a setter', function() {
        var echo;
        echo = new Specho;
        echo.beer = 14;
        return echo.uniforms.beer.value.should.equal(14);
      });
      return it('creates a typed object under @uniforms', function() {
        var echo;
        echo = new Specho;
        echo.beer = 37;
        return echo.uniforms.beer.should.deep.equal({
          value: 37,
          type: 'f'
        });
      });
    });
    describe('kill', function() {
      return it('sets @active to false', function() {
        var echo;
        echo = new Echotron.Echo;
        echo.kill();
        return echo.active.should.be["false"];
      });
    });
    describe('expired', function() {
      var Specho;
      Specho = (function(_super) {

        __extends(Specho, _super);

        function Specho() {
          Specho.__super__.constructor.apply(this, arguments);
          this.hasBeer = true;
        }

        Specho.prototype.alive = function() {
          return this.hasBeer;
        };

        return Specho;

      })(Echotron.Echo);
      it('returns true when @active and @alive()', function() {
        var echo;
        echo = new Specho;
        echo.expired().should.be["false"];
        echo.kill();
        return echo.expired().should.be["false"];
      });
      return it('returns false when not @active and not @alive()', function() {
        var echo;
        echo = new Specho;
        echo.expired().should.be["false"];
        echo.hasBeer = false;
        echo.expired().should.be["false"];
        echo.kill();
        return echo.expired().should.be["true"];
      });
    });
    describe('alive', function() {
      return it('simply returns @active, by default', function() {
        var echo;
        echo = new Echotron.Echo;
        echo.alive().should.be["true"];
        echo.kill();
        return echo.alive().should.be["false"];
      });
    });
    return it('needs specs');
  });

}).call(this);
