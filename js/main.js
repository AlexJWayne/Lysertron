// Generated by CoffeeScript 1.3.3
(function() {
  var animate, camera, container, lastFrame, layers, render, renderer, scene, song, songName, update, _ref;

  scene = new THREE.Scene;

  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 100000);

  camera.position.set(600, 0, 0);

  camera.lookAt(new THREE.Vector3);

  scene.add(camera);

  container = document.createElement('div');

  document.body.appendChild(container);

  renderer = new THREE.WebGLRenderer({
    antialias: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight);

  container.appendChild(renderer.domElement);

  layers = [];

  song = scene.song = new Song;

  song.on('beat', function() {
    var layer, _i, _len;
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      if (layer.active) {
        layer.beat();
      }
    }
  });

  song.on('bar', function() {
    var layer, _i, _len;
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      if (layer.active) {
        layer.bar();
      }
    }
  });

  song.on('section', function(section) {
    var layer, _i, _len;
    console.log('new section');
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      layer.kill();
    }
    layers.push(new Layers.Planes(scene));
    return layers.push(new Layers.Cubes(scene));
  });

  song.on('bar', function(bar) {
    return console.log('drift', bar.start - song.audio[0].currentTime);
  });

  lastFrame = Date.now() / 1000;

  update = function() {
    var elapsed, layer, now, tempLayers, _i, _j, _len, _len1, _results;
    now = Date.now() / 1000;
    elapsed = now - lastFrame;
    lastFrame = now;
    tempLayers = [];
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      if (layer.expired()) {
        scene.remove(layer);
      } else {
        tempLayers.push(layer);
      }
    }
    layers = tempLayers;
    _results = [];
    for (_j = 0, _len1 = layers.length; _j < _len1; _j++) {
      layer = layers[_j];
      _results.push(layer.update(elapsed));
    }
    return _results;
  };

  animate = function() {
    requestAnimationFrame(animate);
    update();
    return render();
  };

  render = function() {
    return renderer.render(scene, camera);
  };

  songName = ((_ref = window.location.search.match(/^\?(\w+)$/)) != null ? _ref[1] : void 0) || 'Crawl';

  console.log(songName);

  song.load(songName, function() {
    song.start();
    return animate();
  });

}).call(this);
