// Generated by CoffeeScript 1.3.3
(function() {
  var animate, beat, camera, container, lastFrame, layers, render, renderer, scene, update, _ref;

  scene = new THREE.Scene;

  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 100000);

  camera.position.set(600, 0, 0);

  camera.lookAt(new THREE.Vector3);

  scene.add(camera);

  container = document.createElement('div');

  document.body.appendChild(container);

  renderer = new THREE.WebGLRenderer({
    antialias: true
  });

  renderer.setSize(window.innerWidth, window.innerHeight);

  container.appendChild(renderer.domElement);

  layers = [new Layers.Planes(scene), new Layers.Cubes(scene)];

  beat = scene.beat = new Beat({
    bpm: parseFloat((_ref = location.search) != null ? _ref.replace('?bpm=', '') : void 0)
  });

  beat.on('beat', function() {
    var layer, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      _results.push(layer.beat());
    }
    return _results;
  });

  lastFrame = Date.now() / 1000;

  update = function() {
    var elapsed, layer, now, _i, _len, _results;
    now = Date.now() / 1000;
    elapsed = now - lastFrame;
    lastFrame = now;
    _results = [];
    for (_i = 0, _len = layers.length; _i < _len; _i++) {
      layer = layers[_i];
      _results.push(layer.update(elapsed));
    }
    return _results;
  };

  animate = function() {
    requestAnimationFrame(animate);
    update();
    return render();
  };

  render = function() {
    return renderer.render(scene, camera);
  };

  animate();

}).call(this);
