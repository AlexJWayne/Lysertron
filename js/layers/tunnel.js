// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Layers.Tunnel = (function(_super) {

    __extends(Tunnel, _super);

    function Tunnel(scene) {
      this.scene = scene;
      Tunnel.__super__.constructor.apply(this, arguments);
      this.baseColor = new THREE.Color().setHSV(Math.random(), THREE.Math.randFloat(0.5, 1), THREE.Math.randFloat(0.5, 1));
      this.sides = Math.random() > 0.4 ? 40 : [3, 4, 5, 6, 7][THREE.Math.randInt(0, 4)];
      this.uniforms = {
        brightness: {
          type: 'f',
          value: 1
        },
        colorR: {
          type: 'f',
          value: this.baseColor.r
        },
        colorG: {
          type: 'f',
          value: this.baseColor.g
        },
        colorB: {
          type: 'f',
          value: this.baseColor.b
        }
      };
      this.mesh = new THREE.Mesh(new THREE.CylinderGeometry(0, 1000, 20000, this.sides, 40), new THREE.ShaderMaterial(_.extend(this.getMatProperties('tunnel'), {
        uniforms: this.uniforms,
        side: THREE.BackSide,
        transparent: true,
        blending: THREE.AdditiveBlending
      })));
      this.mesh.material.side = THREE.BackSide;
      this.rotation.z = 90 * Math.PI / 180;
      this.add(this.mesh);
    }

    Tunnel.prototype.beat = function(beat) {
      return this.baseColor = this.baseColor.clone();
    };

    Tunnel.prototype.bar = function(bar) {
      return this.brightness = 1;
    };

    Tunnel.prototype.update = function(elapsed) {
      this.brightness -= 0.4 * elapsed;
      return this.setColor();
    };

    Object.defineProperty(Tunnel.prototype, 'brightness', {
      get: function() {
        return this.uniforms.brightness.value;
      },
      set: function(val) {
        return this.uniforms.brightness.value = val;
      }
    });

    Tunnel.prototype.setColor = function() {
      var color;
      color = this.baseColor.clone().setRGB(this.baseColor.r * this.brightness, this.baseColor.g * this.brightness, this.baseColor.b * this.brightness);
      return this.mesh.material.color = color;
    };

    return Tunnel;

  })(Layers.Base);

}).call(this);
