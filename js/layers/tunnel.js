// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Layers.Tunnel = (function(_super) {

    __extends(Tunnel, _super);

    function Tunnel(scene) {
      this.scene = scene;
      Tunnel.__super__.constructor.apply(this, arguments);
      this.brightness = 1;
      this.baseColor = new THREE.Color(0x000000);
      this.currentColor = new THREE.Color(0x00ff00);
      this.mesh = new THREE.Mesh(new THREE.CylinderGeometry(0, 1000, 20000, 20, 40), new THREE.MeshBasicMaterial({
        color: this.currentColor
      }));
      this.mesh.material.side = THREE.BackSide;
      this.rotation.z = 90 * Math.PI / 180;
      this.add(this.mesh);
    }

    Tunnel.prototype.beat = function(beat) {
      this.currentColor = this.baseColor.clone();
      return this.setColor();
    };

    Tunnel.prototype.bar = function(bar) {
      return this.brightness = 1;
    };

    Tunnel.prototype.segment = function(segment) {
      var b, g, r;
      r = _(segment.pitches.slice(0, 4)).reduce(function(sum, num) {
        if (sum == null) {
          sum = 0;
        }
        return sum + num;
      }) / 2;
      g = _(segment.pitches.slice(4, 8)).reduce(function(sum, num) {
        if (sum == null) {
          sum = 0;
        }
        return sum + num;
      }) / 2;
      b = _(segment.pitches.slice(8, 12)).reduce(function(sum, num) {
        if (sum == null) {
          sum = 0;
        }
        return sum + num;
      }) / 2;
      return this.baseColor.setRGB(r, g, b);
    };

    Tunnel.prototype.update = function(elapsed) {
      this.brightness -= 0.6 * elapsed;
      return this.setColor();
    };

    Tunnel.prototype.setColor = function() {
      var color;
      color = this.currentColor.clone().setRGB(this.currentColor.r * this.brightness, this.currentColor.g * this.brightness, this.currentColor.b * this.brightness);
      return this.mesh.material.color = color;
    };

    return Tunnel;

  })(Layers.Base);

}).call(this);
