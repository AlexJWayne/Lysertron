// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Layers.Cubes = (function(_super) {

    __extends(Cubes, _super);

    Cubes.prototype.components = {
      Rotator: {
        maxRoll: 90,
        maxPitch: 90
      }
    };

    function Cubes(scene) {
      var direction;
      this.scene = scene;
      Cubes.__super__.constructor.apply(this, arguments);
      this.cubes = new LayerStack;
      this.size = [THREE.Math.randFloat(50, 200), THREE.Math.randFloat(50, 200)];
      this.type = ['Cube', 'Sphere'][THREE.Math.randInt(0, 1)];
      this.spawnQty = THREE.Math.randInt(2, 6);
      this.shrinkTime = THREE.Math.randInt(3, 6) / this.scene.song.bps;
      direction = [1, -1][THREE.Math.randInt(0, 1)];
      this.speed = THREE.Math.randFloat(0, 500) * -direction;
      this.accel = THREE.Math.randFloat(0, 1000) * direction;
      this.color = {
        r: THREE.Math.randFloat(0, 1),
        g: THREE.Math.randFloat(0, 1),
        b: THREE.Math.randFloat(0, 1)
      };
    }

    Cubes.prototype.beat = function() {
      var cube, i, _i, _ref;
      for (i = _i = 1, _ref = this.spawnQty; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        cube = new Layers.Cubes.Cube(this, {
          color: this.color,
          speed: this.speed,
          accel: this.accel,
          size: this.size
        });
        this.add(cube);
        this.cubes.push(cube);
      }
    };

    Cubes.prototype.bar = function() {
      var cube, i, _i, _ref, _results;
      _results = [];
      for (i = _i = 1, _ref = this.spawnQty * 5; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        cube = new Layers.Cubes.Cube(this, {
          color: this.color,
          speed: Math.abs(this.speed * 2),
          accel: this.accel,
          size: this.size.map(function(s) {
            return s / 3;
          })
        });
        this.add(cube);
        _results.push(this.cubes.push(cube));
      }
      return _results;
    };

    Cubes.prototype.update = function(elapsed) {
      Cubes.__super__.update.apply(this, arguments);
      return this.cubes.update(elapsed);
    };

    Cubes.prototype.alive = function() {
      return !this.cubes.isEmpty();
    };

    return Cubes;

  })(Layers.Base);

  Layers.Cubes.Cube = (function(_super) {

    __extends(Cube, _super);

    function Cube(parent, _arg) {
      var geom, material, _ref;
      this.parent = parent;
      this.color = _arg.color, this.speed = _arg.speed, this.accel = _arg.accel, this.size = _arg.size;
      Cube.__super__.constructor.apply(this, arguments);
      material = {};
      this.uniforms = {
        beatScale: {
          type: 'f',
          value: 1
        },
        colorR: {
          type: 'f',
          value: this.color.r
        },
        colorG: {
          type: 'f',
          value: this.color.g
        },
        colorB: {
          type: 'f',
          value: this.color.b
        }
      };
      size = (_ref = THREE.Math).randFloat.apply(_ref, this.size);
      geom = this.parent.type === 'Cube' ? new THREE.CubeGeometry(size, size, size, 1, 1, 1) : new THREE.SphereGeometry(size / 2, 16, 12);
      this.mesh = new THREE.Mesh(geom, new THREE.ShaderMaterial(_.extend(this.getMatProperties('cube'), {
        uniforms: this.uniforms
      })));
      this.add(this.mesh);
      this.mesh.position.set(THREE.Math.randFloatSpread(300), THREE.Math.randFloatSpread(300), THREE.Math.randFloatSpread(300));
      this.accel = this.accel;
      this.vel = this.mesh.position.clone().setLength(this.speed);
    }

    Cube.prototype.alive = function() {
      return this.uniforms.beatScale.value > 0;
    };

    Cube.prototype.update = function(elapsed) {
      Cube.__super__.update.apply(this, arguments);
      this.uniforms.beatScale.value -= elapsed / this.parent.shrinkTime;
      this.vel.addSelf(this.mesh.position.clone().setLength(this.accel * elapsed));
      this.mesh.position.addSelf(this.vel.clone().multiplyScalar(elapsed));
      if (this.uniforms.beatScale.value <= 0) {
        return this.kill();
      }
    };

    return Cube;

  })(Layers.Base);

}).call(this);
