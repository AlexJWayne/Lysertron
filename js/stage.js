// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Echotron.Stage = (function() {

    function Stage() {
      this.render = __bind(this.render, this);

      this.animate = __bind(this.animate, this);

      this.update = __bind(this.update, this);
      this.initEngine();
      this.initSong();
    }

    Stage.prototype.initEngine = function() {
      var container;
      this.logicalLayers = {
        background: {
          scene: new THREE.Scene
        },
        midground: {
          scene: new THREE.Scene
        },
        foreground: {
          scene: new THREE.Scene
        }
      };
      this.logicalLayers.background.stack = new Echotron.LayerStack(this.logicalLayers.background.scene, [], 'background');
      this.logicalLayers.midground.stack = new Echotron.LayerStack(this.logicalLayers.midground.scene, [], 'midground');
      this.logicalLayers.foreground.stack = new Echotron.LayerStack(this.logicalLayers.foreground.scene, [], 'foreground');
      this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 5000);
      this.camera.position.set(0, 0, -60);
      this.camera.lookAt(new THREE.Vector3(0, 0, 0));
      this.logicalLayers.background.scene.add(this.camera);
      this.logicalLayers.midground.scene.add(this.camera);
      this.logicalLayers.foreground.scene.add(this.camera);
      container = document.createElement('div');
      document.body.appendChild(container);
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.autoClear = false;
      container.appendChild(this.renderer.domElement);
      this.stats = new Stats;
      $(document.body).append(this.stats.domElement);
      return THREEx.WindowResize(this.renderer, this.camera);
    };

    Stage.prototype.initSong = function() {
      var barCount, eventType, fullTransition, _fn, _i, _len, _ref,
        _this = this;
      this.song = new Echotron.Song;
      _ref = ['bar', 'beat', 'tatum', 'segment'];
      _fn = function(eventType) {
        return _this.song.on(eventType, function(eventData) {
          var handlerName;
          handlerName = _this.getHandlerName(eventType);
          _this.logicalLayers.background.stack[handlerName](eventData);
          _this.logicalLayers.midground.stack[handlerName](eventData);
          return _this.logicalLayers.foreground.stack[handlerName](eventData);
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventType = _ref[_i];
        _fn(eventType);
      }
      barCount = 0;
      fullTransition = function() {
        barCount = 0;
        _this.logicalLayers.background.stack.transition();
        _this.logicalLayers.midground.stack.transition();
        return _this.logicalLayers.foreground.stack.transition();
      };
      this.song.on('section', fullTransition);
      this.song.on('bar', function() {
        barCount++;
        if (barCount > 8) {
          return fullTransition();
        }
      });
      return this.songName = this.getParam('song');
    };

    Stage.prototype.start = function(playAudio) {
      var _this = this;
      if (playAudio == null) {
        playAudio = true;
      }
      this.lastFrame = Date.now() / 1000;
      return this.song.load(this.songName, function() {
        _this.song.start(playAudio);
        return _this.animate();
      });
    };

    Stage.prototype.update = function() {
      var echoType, elapsed, logicalLayer, now, _ref;
      now = Date.now() / 1000;
      elapsed = now - this.lastFrame;
      this.lastFrame = now;
      TWEEN.update();
      _ref = this.logicalLayers;
      for (echoType in _ref) {
        logicalLayer = _ref[echoType];
        logicalLayer.stack.update(elapsed);
      }
    };

    Stage.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      this.update();
      this.render();
      this.stats.end();
      return this.stats.begin();
    };

    Stage.prototype.render = function() {
      this.renderer.clear(true, true, true);
      this.renderer.render(this.logicalLayers.background.scene, this.camera);
      this.renderer.clear(false, true, true);
      this.renderer.render(this.logicalLayers.midground.scene, this.camera);
      this.renderer.clear(false, true, true);
      return this.renderer.render(this.logicalLayers.foreground.scene, this.camera);
    };

    Stage.prototype.getParam = function(name) {
      var regex, regexS, results;
      name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
      regexS = "[\\?&]" + name + "=([^&#]*)";
      regex = new RegExp(regexS);
      results = regex.exec(window.location.search);
      if (results) {
        return decodeURIComponent(results[1].replace(/\+/g, " "));
      } else {
        return null;
      }
    };

    Stage.prototype.getHandlerName = function(eventName) {
      return "on" + (eventName.charAt(0).toUpperCase()) + eventName.slice(1, eventName.length);
    };

    return Stage;

  })();

  $(function() {
    var stage;
    stage = window.stage = new Echotron.Stage;
    if (typeof mocha === "undefined" || mocha === null) {
      return stage.start(true);
    }
  });

}).call(this);
