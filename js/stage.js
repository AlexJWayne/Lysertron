// Generated by CoffeeScript 1.3.3
(function() {
  var stage,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Stage = (function() {

    function Stage() {
      this.render = __bind(this.render, this);

      this.animate = __bind(this.animate, this);

      this.update = __bind(this.update, this);
      this.initEngine();
      this.initSong();
    }

    Stage.prototype.initEngine = function() {
      var container;
      this.scene = new THREE.Scene;
      this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 100000);
      this.camera.position.set(600, 0, 0);
      this.camera.lookAt(new THREE.Vector3);
      this.scene.add(this.camera);
      container = document.createElement('div');
      document.body.appendChild(container);
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      container.appendChild(this.renderer.domElement);
      return this.layers = [];
    };

    Stage.prototype.initSong = function() {
      var eventType, _fn, _i, _len, _ref, _ref1,
        _this = this;
      this.song = this.scene.song = new Song;
      _ref = ['bar', 'beat', 'tatum', 'segment'];
      _fn = function(eventType) {
        return _this.song.on(eventType, function(eventData) {
          var layer, _j, _len1, _ref1;
          _ref1 = _this.layers;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            layer = _ref1[_j];
            if (layer.active) {
              layer[eventType](eventData);
            }
          }
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventType = _ref[_i];
        _fn(eventType);
      }
      this.song.on('section', function(section) {
        var layer, _j, _len1, _ref1;
        console.log('section', section.start);
        _ref1 = _this.layers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          layer = _ref1[_j];
          layer.kill();
        }
        _this.layers.push(new Layers.Planes(_this.scene));
        return _this.layers.push(new Layers.Cubes(_this.scene));
      });
      return this.songName = ((_ref1 = window.location.search.match(/^\?(\w+)$/)) != null ? _ref1[1] : void 0) || 'Crawl';
    };

    Stage.prototype.start = function(playAudio) {
      var _this = this;
      if (playAudio == null) {
        playAudio = true;
      }
      this.lastFrame = Date.now() / 1000;
      return this.song.load(this.songName, function() {
        _this.song.start(playAudio);
        return _this.animate();
      });
    };

    Stage.prototype.update = function() {
      var elapsed, layer, livingLayers, now, _i, _j, _len, _len1, _ref, _ref1, _results;
      now = Date.now() / 1000;
      elapsed = now - this.lastFrame;
      this.lastFrame = now;
      livingLayers = [];
      _ref = this.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.expired()) {
          this.scene.remove(layer);
        } else {
          livingLayers.push(layer);
        }
      }
      this.layers = livingLayers;
      _ref1 = this.layers;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        layer = _ref1[_j];
        _results.push(layer.update(elapsed));
      }
      return _results;
    };

    Stage.prototype.animate = function() {
      requestAnimationFrame(this.animate);
      this.update();
      return this.render();
    };

    Stage.prototype.render = function() {
      return this.renderer.render(this.scene, this.camera);
    };

    return Stage;

  })();

  stage = window.stage = new Stage;

  stage.start(false);

}).call(this);
