// Generated by CoffeeScript 1.3.3
(function() {
  var _base, _base1, _base2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Echotron || (window.Echotron = {});

  Echotron.Echoes || (Echotron.Echoes = {});

  (_base = Echotron.Echoes).foreground || (_base.foreground = []);

  (_base1 = Echotron.Echoes).midground || (_base1.midground = []);

  (_base2 = Echotron.Echoes).background || (_base2.background = []);

  Echotron.Echo = (function(_super) {

    __extends(Echo, _super);

    Echo.prototype.uniformAttrs = {};

    function Echo() {
      Echo.__super__.constructor.apply(this, arguments);
      this.active = true;
      this.initUniforms();
    }

    Echo.prototype.initUniforms = function() {
      var name, type, _ref,
        _this = this;
      this.uniforms = {};
      _ref = this.uniformAttrs;
      for (name in _ref) {
        type = _ref[name];
        this.uniforms[name] = {
          type: type,
          value: null
        };
        if (!(name in this)) {
          (function(name, type) {
            return Object.defineProperty(_this.constructor.prototype, name, {
              get: function() {
                return this.uniforms[name].value;
              },
              set: function(val) {
                return this.uniforms[name].value = val;
              }
            });
          })(name, type);
        }
      }
    };

    Echo.prototype.kill = function() {
      return this.active = false;
    };

    Echo.prototype.expired = function() {
      return !this.active && !this.alive();
    };

    Echo.prototype.alive = function() {
      return this.active;
    };

    Echo.prototype.onBeat = function() {};

    Echo.prototype.onBar = function() {};

    Echo.prototype.onSegment = function() {};

    Echo.prototype.onTatum = function() {};

    Echo.prototype.update = function(elapsed) {};

    return Echo;

  })(THREE.Object3D);

}).call(this);
