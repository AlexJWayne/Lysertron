// Generated by CoffeeScript 1.3.3
(function() {

  window.Song = (function() {

    _.extend(Song.prototype, Backbone.Events);

    function Song() {}

    Song.prototype.eventTypes = ['beat', 'bar', 'tatum', 'segment', 'section'];

    Song.prototype.load = function(name, cb) {
      var _this = this;
      this.name = name;
      this.audio = $('<audio id="audio" preload="auto" controls>');
      this.audio.attr({
        src: "songs/" + this.name + ".m4a"
      });
      $('body').append(this.audio);
      this.audio.on('canplay', function() {
        return cb(_this);
      });
      return $.ajax({
        url: "songs/" + this.name + ".json",
        dataType: 'json',
        async: false,
        success: function(data) {
          _this.data = data;
          _this.bpm = _this.data.track.tempo;
          return _this.bps = _this.bpm / 60;
        }
      });
    };

    Song.prototype.scheduleEvents = function() {
      var eventData, eventType, _fn, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      _ref = this.eventTypes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        eventType = _ref[_i];
        _ref1 = this.data["" + eventType + "s"];
        _fn = function(eventType, eventData) {
          return setTimeout(function() {
            return _this.trigger(eventType, eventData);
          }, eventData.start * 1000);
        };
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          eventData = _ref1[_j];
          _fn(eventType, eventData);
        }
      }
    };

    Song.prototype.start = function(playAudio) {
      var _this = this;
      if (playAudio == null) {
        playAudio = true;
      }
      if (playAudio) {
        this.audio.on('playing', function() {
          return _this.scheduleEvents();
        });
        return this.audio[0].play();
      } else {
        return this.scheduleEvents();
      }
    };

    return Song;

  })();

}).call(this);
