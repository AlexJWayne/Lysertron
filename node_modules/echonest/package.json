{
  "name": "echonest",
  "version": "0.0.3",
  "private": false,
  "dependencies": {
    "fermata": "",
    "underscore": ""
  },
  "devDependencies": {
    "async": ">= 0.1.15",
    "coffee-script": "",
    "coffeelint": "",
    "vows": ""
  },
  "engines": {
    "node": "*"
  },
  "author": {
    "name": "Brendan Adamson",
    "email": "brendan.adamson@gmail.com",
    "url": "https://github.com/badamson"
  },
  "description": "node.js client for the echonest api written in coffeescript",
  "homepage": "https://github.com/badamson/node-echonest",
  "repository": {
    "type": "git",
    "url": "git://github.com/badamson/node-echonest.git"
  },
  "main": "dist/echonest.js",
  "keywords": [
    "echonest"
  ],
  "scripts": {
    "prepublish": "rake build",
    "test": "find test -name 'test*.coffee' | xargs node_modules/.bin/vows --spec"
  },
  "readme": "echonest.js\n=============\n\nA node.js client for the [Echonest API](http://developer.echonest.com/docs/v4/).\n\n[![Build Status](https://secure.travis-ci.org/badamson/node-echonest.png?branch=master)](http://travis-ci.org/badamson/node-echonest)\n\nInstallation\n------------\n\nTo use it with node:\n\n    npm install echonest\n\nGet [an API key](http://developer.echonest.com/docs/v4/#keys).\n\n### example usage in javascript\n\n    echonest = require('echonest');\n    var myNest = new echonest.Echonest({\n        api_key: 'XXX YOUR API KEY XXX'\n    });\n\n    myNest.artist.familiarity({\n        name: 'portishead'\n    }, function (error, response) {\n        if (error) {\n            console.log(error, response);\n        } else {\n            console.log('familiarity:', response.artist.familiarity);\n            // see the whole response\n            console.log('response:', response);\n        }\n    });\n\noutput:\n\n    familiarity: 0.8310873556337086\n    response: { status: { version: '4.2', code: 0, message: 'Success' },\n        artist: \n    { familiarity: 0.8310873556337086,\n            id: 'ARJVTD81187FB51621',\n            name: 'Portishead' } }\n\nTo search with multiple buckets (or descriptions, styles, moods), [use an array](https://github.com/badamson/node-echonest/blob/master/test/v4/testMultibucket.coffee): `style: ['lounge', 'metal']`.\n\nThe tests touch every endpoint of the live API--including uploading a tune to [track/upload](http://developer.echonest.com/docs/v4/track.html#upload)--so [see them](https://github.com/badamson/node-echonest/tree/master/test/v4) for real examples. They're in [coffeescript](http://coffeescript.org/). You'll also need to visit the [Echonest API Documentation](http://developer.echonest.com/docs/v4) to see what parameters each method accepts and what to expect in the response.\n\nThere's some pretty neat stuff in [playlist generation](http://developer.echonest.com/docs/v4/playlist.html#static) (echonest is used by [Spotify radio](http://venturebeat.com/2011/12/16/echo-nest-spotify/)) and [song search](http://developer.echonest.com/docs/v4/song.html#search).\n\nContributing\n------------\n\n* clone\n* install dev dependencies -- `npm install`\n* install [rake](http://rubygems.org/gems/rake)\n* run the tests -- `rake test`\n\nThe echonest.js file distributed by npm is generated from coffeescript, and not checked into the repository. To see it, run `rake build`.\n\nIt could use some fancier handling of [echonest's response codes](http://developer.echonest.com/docs/v4/index.html#response-codes). It could also probably work outside node.js in a browser without too much work. It's missing some of the slicker stuff from [other client libraries](http://developer.echonest.com/client_libraries.html).\n\nExploring\n---------\n\nThe default callback logs errors and responses. These are the loudest 15 songs from the southern hemisphere in d minor (the saddest of all keys), from the coffeescript repl:\n\n    coffee> echonest = require 'echonest'\n    { Echonest: [Function: Echonest] }\n    coffee> mynest = new echonest.Echonest(api_key: 'XXX')\n    { api_key: 'XXX',\n      api_version: 'v4',\n      host: 'http://developer.echonest.com',\n      jsonclient: {},\n      song:\n       { search: [Function],\n         profile: [Function],\n         identify: [Function] },\n      artist:\n       { biographies: [Function],\n         blogs: [Function],\n         familiarity: [Function],\n         hotttnesss: [Function],\n         images: [Function],\n         list_terms: [Function],\n         news: [Function],\n         profile: [Function],\n         reviews: [Function],\n         search: [Function],\n         extract: [Function],\n         songs: [Function],\n         similar: [Function],\n         suggest: [Function],\n         terms: [Function],\n         top_hottt: [Function],\n         top_terms: [Function],\n         twitter: [Function],\n         urls: [Function],\n         video: [Function] },\n      track:\n       { analyze: [Function],\n         profile: [Function],\n         upload: [Function] },\n      playlist:\n       { basic: [Function],\n         static: [Function],\n         dynamic: [Function],\n         session_info: [Function] },\n      catalog:\n       { create: [Function],\n         update: [Function],\n         status: [Function],\n         profile: [Function],\n         read: [Function],\n         feed: [Function],\n         list: [Function],\n         delete: [Function] } }\n    coffee> # loudest songs from the southern hemisphere in d minor\n    coffee> mynest.song.search(sort: 'loudness-desc', max_latitude: 0, key: 'd', mode: 0) \n    err:  [Error: Bad status code from server: 400]\n    data:  { status:\n       { version: '4.2',\n         code: 5,\n         message: 'key - Invalid value for parameter: \"key\" must be a whole number' } }\n    coffee> # loudest songs from the southern hemisphere in d minor, take 2\n    coffee> mynest.song.search(sort: 'loudness-desc', max_latitude: 0, key: 2, mode: 0)\n    err:  null\n    data:  { status: { version: '4.2', code: 0, message: 'Success' },\n      songs:\n       [ { artist_id: 'AROJN321187B9A1967',\n           id: 'SOHSSIY12D8578F65A',\n           artist_name: 'Sissy Spacek',\n           title: 'Bone Flour' },\n         { artist_id: 'ARYSZJY1187B9AA68B',\n           id: 'SOYQFVQ131343A55FE',\n           artist_name: 'Prurient',\n           title: 'Troubled Sleep' },\n         { artist_id: 'ARG1JWO1187B993356',\n           id: 'SOZZDMT12A8C145013',\n           artist_name: 'Massimo',\n           title: 'Hello Dirty 1' },\n         { artist_id: 'ARTG2FK1187B99A5B2',\n           id: 'SODBQCA12AB0183BA2',\n           artist_name: 'Landed',\n           title: 'FM 91.1' },\n         { artist_id: 'ARWDKKI130D26542D8',\n           id: 'SOMGUYA131F71D6F1A',\n           artist_name: 'Fucked',\n           title: 'Lloyd+Robbie3' },\n         { artist_id: 'AREBLP31187FB4F35F',\n           id: 'SOKJANR13152A73068',\n           artist_name: 'Merzbow',\n           title: 'Minotaurus' },\n         { artist_id: 'ARCMHNT12F54FADAC1',\n           id: 'SOBOEME130516E3532',\n           artist_name: 'Wenaki',\n           title: 'Velocity' },\n         { artist_id: 'ARCMHNT12F54FADAC1',\n           id: 'SOYSVXP1316771415E',\n           artist_name: 'Wenaki',\n           title: 'Velocity' },\n         { artist_id: 'AR1D1ML1187B98C004',\n           id: 'SOMEYIT130516E0457',\n           artist_name: 'Gerritt & John Wiese',\n           title: 'Untitled' },\n         { artist_id: 'AR1D1ML1187B98C004',\n           id: 'SOLNVGU12D9F521519',\n           artist_name: 'Gerritt & John Wiese',\n           title: 'Untitled' },\n         { artist_id: 'AR1D1ML1187B98C004',\n           id: 'SOQJPAN13134386EFE',\n           artist_name: 'Gerritt & John Wiese',\n           title: 'Untitled' },\n         { artist_id: 'ARTPWDY11C8A416B06',\n           id: 'SOUECOP131343A19BA',\n           artist_name: 'Faux Pride',\n           title: 'YouSuckDotCom' },\n         { artist_id: 'ARUCSL71187B98EC94',\n           id: 'SOSUCKF12AB018AA36',\n           artist_name: 'Jason Crumer',\n           title: 'III. Betrayal After Betrayal' },\n         { artist_id: 'ARXMWHU122C86777D1',\n           id: 'SOOYLHL130516DD3AD',\n           artist_name: 'Big Deformed Head',\n           title: 'Most Triumphant Motherfucker...and I Use the Term Triumphant Loo' },\n         { artist_id: 'ARMBMKW1187FB5A735',\n           id: 'SOBFKVK12AF7299AB9',\n           artist_name: 'Autotrash',\n           title: 'Sex Ape' } ] }\n",
  "readmeFilename": "README.md",
  "_id": "echonest@0.0.3",
  "_from": "echonest"
}
